(function() {var implementors = {};
implementors["cgmath"] = [{"text":"impl&lt;S:&nbsp;BaseFloat&gt; Add&lt;Matrix2&lt;S&gt;&gt; for Matrix2&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;BaseFloat&gt; Add&lt;&amp;'a Matrix2&lt;S&gt;&gt; for Matrix2&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;BaseFloat&gt; Add&lt;Matrix2&lt;S&gt;&gt; for &amp;'a Matrix2&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, S:&nbsp;BaseFloat&gt; Add&lt;&amp;'a Matrix2&lt;S&gt;&gt; for &amp;'b Matrix2&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;BaseFloat&gt; Add&lt;Matrix3&lt;S&gt;&gt; for Matrix3&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;BaseFloat&gt; Add&lt;&amp;'a Matrix3&lt;S&gt;&gt; for Matrix3&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;BaseFloat&gt; Add&lt;Matrix3&lt;S&gt;&gt; for &amp;'a Matrix3&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, S:&nbsp;BaseFloat&gt; Add&lt;&amp;'a Matrix3&lt;S&gt;&gt; for &amp;'b Matrix3&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;BaseFloat&gt; Add&lt;Matrix4&lt;S&gt;&gt; for Matrix4&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;BaseFloat&gt; Add&lt;&amp;'a Matrix4&lt;S&gt;&gt; for Matrix4&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;BaseFloat&gt; Add&lt;Matrix4&lt;S&gt;&gt; for &amp;'a Matrix4&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, S:&nbsp;BaseFloat&gt; Add&lt;&amp;'a Matrix4&lt;S&gt;&gt; for &amp;'b Matrix4&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;BaseFloat&gt; Add&lt;Quaternion&lt;S&gt;&gt; for Quaternion&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;BaseFloat&gt; Add&lt;&amp;'a Quaternion&lt;S&gt;&gt; for Quaternion&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;BaseFloat&gt; Add&lt;Quaternion&lt;S&gt;&gt; for &amp;'a Quaternion&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, S:&nbsp;BaseFloat&gt; Add&lt;&amp;'a Quaternion&lt;S&gt;&gt; for &amp;'b Quaternion&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;BaseNum&gt; Add&lt;Vector1&lt;S&gt;&gt; for Vector1&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;BaseNum&gt; Add&lt;&amp;'a Vector1&lt;S&gt;&gt; for Vector1&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;BaseNum&gt; Add&lt;Vector1&lt;S&gt;&gt; for &amp;'a Vector1&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, S:&nbsp;BaseNum&gt; Add&lt;&amp;'a Vector1&lt;S&gt;&gt; for &amp;'b Vector1&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;BaseNum&gt; Add&lt;Vector2&lt;S&gt;&gt; for Vector2&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;BaseNum&gt; Add&lt;&amp;'a Vector2&lt;S&gt;&gt; for Vector2&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;BaseNum&gt; Add&lt;Vector2&lt;S&gt;&gt; for &amp;'a Vector2&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, S:&nbsp;BaseNum&gt; Add&lt;&amp;'a Vector2&lt;S&gt;&gt; for &amp;'b Vector2&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;BaseNum&gt; Add&lt;Vector3&lt;S&gt;&gt; for Vector3&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;BaseNum&gt; Add&lt;&amp;'a Vector3&lt;S&gt;&gt; for Vector3&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;BaseNum&gt; Add&lt;Vector3&lt;S&gt;&gt; for &amp;'a Vector3&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, S:&nbsp;BaseNum&gt; Add&lt;&amp;'a Vector3&lt;S&gt;&gt; for &amp;'b Vector3&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;BaseNum&gt; Add&lt;Vector4&lt;S&gt;&gt; for Vector4&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;BaseNum&gt; Add&lt;&amp;'a Vector4&lt;S&gt;&gt; for Vector4&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;BaseNum&gt; Add&lt;Vector4&lt;S&gt;&gt; for &amp;'a Vector4&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, S:&nbsp;BaseNum&gt; Add&lt;&amp;'a Vector4&lt;S&gt;&gt; for &amp;'b Vector4&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;BaseFloat&gt; Add&lt;Rad&lt;S&gt;&gt; for Rad&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;BaseFloat&gt; Add&lt;&amp;'a Rad&lt;S&gt;&gt; for Rad&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;BaseFloat&gt; Add&lt;Rad&lt;S&gt;&gt; for &amp;'a Rad&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, S:&nbsp;BaseFloat&gt; Add&lt;&amp;'a Rad&lt;S&gt;&gt; for &amp;'b Rad&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;BaseFloat&gt; Add&lt;Deg&lt;S&gt;&gt; for Deg&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;BaseFloat&gt; Add&lt;&amp;'a Deg&lt;S&gt;&gt; for Deg&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;BaseFloat&gt; Add&lt;Deg&lt;S&gt;&gt; for &amp;'a Deg&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, S:&nbsp;BaseFloat&gt; Add&lt;&amp;'a Deg&lt;S&gt;&gt; for &amp;'b Deg&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;BaseNum&gt; Add&lt;Vector1&lt;S&gt;&gt; for Point1&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;BaseNum&gt; Add&lt;&amp;'a Vector1&lt;S&gt;&gt; for Point1&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;BaseNum&gt; Add&lt;Vector1&lt;S&gt;&gt; for &amp;'a Point1&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, S:&nbsp;BaseNum&gt; Add&lt;&amp;'a Vector1&lt;S&gt;&gt; for &amp;'b Point1&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;BaseNum&gt; Add&lt;Vector2&lt;S&gt;&gt; for Point2&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;BaseNum&gt; Add&lt;&amp;'a Vector2&lt;S&gt;&gt; for Point2&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;BaseNum&gt; Add&lt;Vector2&lt;S&gt;&gt; for &amp;'a Point2&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, S:&nbsp;BaseNum&gt; Add&lt;&amp;'a Vector2&lt;S&gt;&gt; for &amp;'b Point2&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;BaseNum&gt; Add&lt;Vector3&lt;S&gt;&gt; for Point3&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;BaseNum&gt; Add&lt;&amp;'a Vector3&lt;S&gt;&gt; for Point3&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;BaseNum&gt; Add&lt;Vector3&lt;S&gt;&gt; for &amp;'a Point3&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, S:&nbsp;BaseNum&gt; Add&lt;&amp;'a Vector3&lt;S&gt;&gt; for &amp;'b Point3&lt;S&gt;","synthetic":false,"types":[]}];
implementors["rgb"] = [{"text":"impl&lt;T&gt; Add&lt;T&gt; for RGB&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Copy + Add&lt;Output = T&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Add&lt;T&gt; for RGBA&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Copy + Add&lt;Output = T&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Add&lt;T&gt; for Gray&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Copy + Add&lt;Output = T&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Add&lt;T&gt; for GrayAlpha&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Copy + Add&lt;Output = T&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Add&gt; Add&lt;RGB&lt;T&gt;&gt; for RGB&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Add&gt; Add&lt;Gray&lt;T&gt;&gt; for Gray&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Add, A:&nbsp;Add&gt; Add&lt;RGBA&lt;T, A&gt;&gt; for RGBA&lt;T, A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Add, A:&nbsp;Add&gt; Add&lt;GrayAlpha&lt;T, A&gt;&gt; for GrayAlpha&lt;T, A&gt;","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()